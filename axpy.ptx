//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31294910
// Cuda compilation tools, release 11.4, V11.4.239
// Based on NVVM 7.0.1
//

.version 7.4
.target sm_52
.address_size 64

	// .globl	_Z4axpyfPfS_
.global .align 4 .u32 gg;
.global .align 8 .b8 buff[1200];
.global .align 8 .b8 buff_r[1200];
.global .align 4 .u32 ccount;

.visible .entry _Z4axpyfPfS_(
	.param .f32 _Z4axpyfPfS__param_0,
	.param .u64 _Z4axpyfPfS__param_1,
	.param .u64 _Z4axpyfPfS__param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<141>;


	mov.u32 	%r4, 0;

$L__BB0_1:
	// begin inline asm
	mov.b64 %rd1, %rd0;
	// end inline asm
	st.volatile.global.u64 	[buff], %rd1;
	// begin inline asm
	mov.b64 %rd2, %rd1;
	// end inline asm
	st.volatile.global.u64 	[buff+8], %rd2;
	// begin inline asm
	mov.b64 %rd3, %rd2;
	// end inline asm
	st.volatile.global.u64 	[buff+16], %rd3;
	// begin inline asm
	mov.b64 %rd4, %rd3;
	// end inline asm
	st.volatile.global.u64 	[buff+24], %rd4;
	// begin inline asm
	mov.b64 %rd5, %rd4;
	// end inline asm
	st.volatile.global.u64 	[buff+32], %rd5;
	// begin inline asm
	mov.b64 %rd6, %rd5;
	// end inline asm
	st.volatile.global.u64 	[buff+40], %rd6;
	// begin inline asm
	mov.b64 %rd7, %rd6;
	// end inline asm
	st.volatile.global.u64 	[buff+48], %rd7;
	// begin inline asm
	mov.b64 %rd8, %rd7;
	// end inline asm
	st.volatile.global.u64 	[buff+56], %rd8;
	// begin inline asm
	mov.b64 %rd9, %rd8;
	// end inline asm
	st.volatile.global.u64 	[buff+64], %rd9;
	// begin inline asm
	mov.b64 %rd10, %rd9;
	// end inline asm
	st.volatile.global.u64 	[buff+72], %rd10;
	// begin inline asm
	mov.b64 %rd11, %rd10;
	// end inline asm
	st.volatile.global.u64 	[buff+80], %rd11;
	// begin inline asm
	mov.b64 %rd12, %rd11;
	// end inline asm
	st.volatile.global.u64 	[buff+88], %rd12;
	// begin inline asm
	mov.b64 %rd13, %rd12;
	// end inline asm
	st.volatile.global.u64 	[buff+96], %rd13;
	// begin inline asm
	mov.b64 %rd14, %rd13;
	// end inline asm
	st.volatile.global.u64 	[buff+104], %rd14;
	// begin inline asm
	mov.b64 %rd15, %rd14;
	// end inline asm
	st.volatile.global.u64 	[buff+112], %rd15;
	// begin inline asm
	mov.b64 %rd16, %rd15;
	// end inline asm
	st.volatile.global.u64 	[buff+120], %rd16;
	// begin inline asm
	mov.b64 %rd17, %rd16;
	// end inline asm
	st.volatile.global.u64 	[buff+128], %rd17;
	// begin inline asm
	mov.b64 %rd18, %rd17;
	// end inline asm
	st.volatile.global.u64 	[buff+136], %rd18;
	// begin inline asm
	mov.b64 %rd19, %rd18;
	// end inline asm
	st.volatile.global.u64 	[buff+144], %rd19;
	// begin inline asm
	mov.b64 %rd20, %rd19;
	// end inline asm
	st.volatile.global.u64 	[buff+152], %rd20;
	// begin inline asm
	mov.b64 %rd21, %rd20;
	// end inline asm
	st.volatile.global.u64 	[buff+160], %rd21;
	// begin inline asm
	mov.b64 %rd22, %rd21;
	// end inline asm
	st.volatile.global.u64 	[buff+168], %rd22;
	// begin inline asm
	mov.b64 %rd23, %rd22;
	// end inline asm
	st.volatile.global.u64 	[buff+176], %rd23;
	// begin inline asm
	mov.b64 %rd24, %rd23;
	// end inline asm
	st.volatile.global.u64 	[buff+184], %rd24;
	// begin inline asm
	mov.b64 %rd25, %rd24;
	// end inline asm
	st.volatile.global.u64 	[buff+192], %rd25;
	// begin inline asm
	mov.b64 %rd26, %rd25;
	// end inline asm
	st.volatile.global.u64 	[buff+200], %rd26;
	// begin inline asm
	mov.b64 %rd27, %rd26;
	// end inline asm
	st.volatile.global.u64 	[buff+208], %rd27;
	// begin inline asm
	mov.b64 %rd28, %rd27;
	// end inline asm
	st.volatile.global.u64 	[buff+216], %rd28;
	// begin inline asm
	mov.b64 %rd29, %rd28;
	// end inline asm
	st.volatile.global.u64 	[buff+224], %rd29;
	// begin inline asm
	mov.b64 %rd30, %rd29;
	// end inline asm
	st.volatile.global.u64 	[buff+232], %rd30;
	// begin inline asm
	mov.b64 %rd31, %rd30;
	// end inline asm
	st.volatile.global.u64 	[buff+240], %rd31;
	// begin inline asm
	mov.b64 %rd32, %rd31;
	// end inline asm
	st.volatile.global.u64 	[buff+248], %rd32;
	// begin inline asm
	mov.b64 %rd33, %rd32;
	// end inline asm
	st.volatile.global.u64 	[buff+256], %rd33;
	// begin inline asm
	mov.b64 %rd34, %rd33;
	// end inline asm
	st.volatile.global.u64 	[buff+264], %rd34;
	// begin inline asm
	mov.b64 %rd35, %rd34;
	// end inline asm
	st.volatile.global.u64 	[buff+272], %rd35;
	// begin inline asm
	mov.b64 %rd36, %rd35;
	// end inline asm
	st.volatile.global.u64 	[buff+280], %rd36;
	// begin inline asm
	mov.b64 %rd37, %rd36;
	// end inline asm
	st.volatile.global.u64 	[buff+288], %rd37;
	// begin inline asm
	mov.b64 %rd38, %rd37;
	// end inline asm
	st.volatile.global.u64 	[buff+296], %rd38;
	// begin inline asm
	mov.b64 %rd39, %rd38;
	// end inline asm
	st.volatile.global.u64 	[buff+304], %rd39;
	// begin inline asm
	mov.b64 %rd40, %rd39;
	// end inline asm
	st.volatile.global.u64 	[buff+312], %rd40;
	// begin inline asm
	mov.b64 %rd41, %rd40;
	// end inline asm
	st.volatile.global.u64 	[buff+320], %rd41;
	// begin inline asm
	mov.b64 %rd42, %rd41;
	// end inline asm
	st.volatile.global.u64 	[buff+328], %rd42;
	// begin inline asm
	mov.b64 %rd43, %rd42;
	// end inline asm
	st.volatile.global.u64 	[buff+336], %rd43;
	// begin inline asm
	mov.b64 %rd44, %rd43;
	// end inline asm
	st.volatile.global.u64 	[buff+344], %rd44;
	// begin inline asm
	mov.b64 %rd45, %rd44;
	// end inline asm
	st.volatile.global.u64 	[buff+352], %rd45;
	// begin inline asm
	mov.b64 %rd46, %rd45;
	// end inline asm
	st.volatile.global.u64 	[buff+360], %rd46;
	// begin inline asm
	mov.b64 %rd47, %rd46;
	// end inline asm
	st.volatile.global.u64 	[buff+368], %rd47;
	// begin inline asm
	mov.b64 %rd48, %rd47;
	// end inline asm
	st.volatile.global.u64 	[buff+376], %rd48;
	// begin inline asm
	mov.b64 %rd49, %rd48;
	// end inline asm
	st.volatile.global.u64 	[buff+384], %rd49;
	// begin inline asm
	mov.b64 %rd50, %rd49;
	// end inline asm
	st.volatile.global.u64 	[buff+392], %rd50;
	// begin inline asm
	mov.b64 %rd51, %rd50;
	// end inline asm
	st.volatile.global.u64 	[buff+400], %rd51;
	// begin inline asm
	mov.b64 %rd52, %rd51;
	// end inline asm
	st.volatile.global.u64 	[buff+408], %rd52;
	// begin inline asm
	mov.b64 %rd53, %rd52;
	// end inline asm
	st.volatile.global.u64 	[buff+416], %rd53;
	// begin inline asm
	mov.b64 %rd54, %rd53;
	// end inline asm
	st.volatile.global.u64 	[buff+424], %rd54;
	// begin inline asm
	mov.b64 %rd55, %rd54;
	// end inline asm
	st.volatile.global.u64 	[buff+432], %rd55;
	// begin inline asm
	mov.b64 %rd56, %rd55;
	// end inline asm
	st.volatile.global.u64 	[buff+440], %rd56;
	// begin inline asm
	mov.b64 %rd57, %rd56;
	// end inline asm
	st.volatile.global.u64 	[buff+448], %rd57;
	// begin inline asm
	mov.b64 %rd58, %rd57;
	// end inline asm
	st.volatile.global.u64 	[buff+456], %rd58;
	// begin inline asm
	mov.b64 %rd59, %rd58;
	// end inline asm
	st.volatile.global.u64 	[buff+464], %rd59;
	// begin inline asm
	mov.b64 %rd60, %rd59;
	// end inline asm
	st.volatile.global.u64 	[buff+472], %rd60;
	// begin inline asm
	mov.b64 %rd61, %rd60;
	// end inline asm
	st.volatile.global.u64 	[buff+480], %rd61;
	// begin inline asm
	mov.b64 %rd62, %rd61;
	// end inline asm
	st.volatile.global.u64 	[buff+488], %rd62;
	// begin inline asm
	mov.b64 %rd63, %rd62;
	// end inline asm
	st.volatile.global.u64 	[buff+496], %rd63;
	// begin inline asm
	mov.b64 %rd64, %rd63;
	// end inline asm
	st.volatile.global.u64 	[buff+504], %rd64;
	// begin inline asm
	mov.b64 %rd65, %rd64;
	// end inline asm
	st.volatile.global.u64 	[buff+512], %rd65;
	// begin inline asm
	mov.b64 %rd66, %rd65;
	// end inline asm
	st.volatile.global.u64 	[buff+520], %rd66;
	// begin inline asm
	mov.b64 %rd67, %rd66;
	// end inline asm
	st.volatile.global.u64 	[buff+528], %rd67;
	// begin inline asm
	mov.b64 %rd68, %rd67;
	// end inline asm
	st.volatile.global.u64 	[buff+536], %rd68;
	// begin inline asm
	mov.b64 %rd69, %rd68;
	// end inline asm
	st.volatile.global.u64 	[buff+544], %rd69;
	// begin inline asm
	mov.b64 %rd70, %rd69;
	// end inline asm
	st.volatile.global.u64 	[buff+552], %rd70;
	// begin inline asm
	mov.b64 %rd71, %rd70;
	// end inline asm
	st.volatile.global.u64 	[buff+560], %rd71;
	// begin inline asm
	mov.b64 %rd72, %rd71;
	// end inline asm
	st.volatile.global.u64 	[buff+568], %rd72;
	// begin inline asm
	mov.b64 %rd73, %rd72;
	// end inline asm
	st.volatile.global.u64 	[buff+576], %rd73;
	// begin inline asm
	mov.b64 %rd74, %rd73;
	// end inline asm
	st.volatile.global.u64 	[buff+584], %rd74;
	// begin inline asm
	mov.b64 %rd75, %rd74;
	// end inline asm
	st.volatile.global.u64 	[buff+592], %rd75;
	// begin inline asm
	mov.b64 %rd76, %rd75;
	// end inline asm
	st.volatile.global.u64 	[buff+600], %rd76;
	// begin inline asm
	mov.b64 %rd77, %rd76;
	// end inline asm
	st.volatile.global.u64 	[buff+608], %rd77;
	// begin inline asm
	mov.b64 %rd78, %rd77;
	// end inline asm
	st.volatile.global.u64 	[buff+616], %rd78;
	// begin inline asm
	mov.b64 %rd79, %rd78;
	// end inline asm
	st.volatile.global.u64 	[buff+624], %rd79;
	// begin inline asm
	mov.b64 %rd80, %rd79;
	// end inline asm
	st.volatile.global.u64 	[buff+632], %rd80;
	// begin inline asm
	mov.b64 %rd81, %rd80;
	// end inline asm
	st.volatile.global.u64 	[buff+640], %rd81;
	// begin inline asm
	mov.b64 %rd82, %rd81;
	// end inline asm
	st.volatile.global.u64 	[buff+648], %rd82;
	// begin inline asm
	mov.b64 %rd83, %rd82;
	// end inline asm
	st.volatile.global.u64 	[buff+656], %rd83;
	// begin inline asm
	mov.b64 %rd84, %rd83;
	// end inline asm
	st.volatile.global.u64 	[buff+664], %rd84;
	// begin inline asm
	mov.b64 %rd85, %rd84;
	// end inline asm
	st.volatile.global.u64 	[buff+672], %rd85;
	// begin inline asm
	mov.b64 %rd86, %rd85;
	// end inline asm
	st.volatile.global.u64 	[buff+680], %rd86;
	// begin inline asm
	mov.b64 %rd87, %rd86;
	// end inline asm
	st.volatile.global.u64 	[buff+688], %rd87;
	// begin inline asm
	mov.b64 %rd88, %rd87;
	// end inline asm
	st.volatile.global.u64 	[buff+696], %rd88;
	// begin inline asm
	mov.b64 %rd89, %rd88;
	// end inline asm
	st.volatile.global.u64 	[buff+704], %rd89;
	// begin inline asm
	mov.b64 %rd90, %rd89;
	// end inline asm
	st.volatile.global.u64 	[buff+712], %rd90;
	// begin inline asm
	mov.b64 %rd91, %rd90;
	// end inline asm
	st.volatile.global.u64 	[buff+720], %rd91;
	// begin inline asm
	mov.b64 %rd92, %rd91;
	// end inline asm
	st.volatile.global.u64 	[buff+728], %rd92;
	// begin inline asm
	mov.b64 %rd93, %rd92;
	// end inline asm
	st.volatile.global.u64 	[buff+736], %rd93;
	// begin inline asm
	mov.b64 %rd94, %rd93;
	// end inline asm
	st.volatile.global.u64 	[buff+744], %rd94;
	// begin inline asm
	mov.b64 %rd95, %rd94;
	// end inline asm
	st.volatile.global.u64 	[buff+752], %rd95;
	// begin inline asm
	mov.b64 %rd96, %rd95;
	// end inline asm
	st.volatile.global.u64 	[buff+760], %rd96;
	// begin inline asm
	mov.b64 %rd97, %rd96;
	// end inline asm
	st.volatile.global.u64 	[buff+768], %rd97;
	// begin inline asm
	mov.b64 %rd98, %rd97;
	// end inline asm
	st.volatile.global.u64 	[buff+776], %rd98;
	// begin inline asm
	mov.b64 %rd99, %rd98;
	// end inline asm
	st.volatile.global.u64 	[buff+784], %rd99;
	// begin inline asm
	mov.b64 %rd100, %rd99;
	// end inline asm
	st.volatile.global.u64 	[buff+792], %rd100;
	// begin inline asm
	mov.b64 %rd101, %rd100;
	// end inline asm
	st.volatile.global.u64 	[buff+800], %rd101;
	// begin inline asm
	mov.b64 %rd102, %rd101;
	// end inline asm
	st.volatile.global.u64 	[buff+808], %rd102;
	// begin inline asm
	mov.b64 %rd103, %rd102;
	// end inline asm
	st.volatile.global.u64 	[buff+816], %rd103;
	// begin inline asm
	mov.b64 %rd104, %rd103;
	// end inline asm
	st.volatile.global.u64 	[buff+824], %rd104;
	// begin inline asm
	mov.b64 %rd105, %rd104;
	// end inline asm
	st.volatile.global.u64 	[buff+832], %rd105;
	// begin inline asm
	mov.b64 %rd106, %rd105;
	// end inline asm
	st.volatile.global.u64 	[buff+840], %rd106;
	// begin inline asm
	mov.b64 %rd107, %rd106;
	// end inline asm
	st.volatile.global.u64 	[buff+848], %rd107;
	// begin inline asm
	mov.b64 %rd108, %rd107;
	// end inline asm
	st.volatile.global.u64 	[buff+856], %rd108;
	// begin inline asm
	mov.b64 %rd109, %rd108;
	// end inline asm
	st.volatile.global.u64 	[buff+864], %rd109;
	// begin inline asm
	mov.b64 %rd110, %rd109;
	// end inline asm
	st.volatile.global.u64 	[buff+872], %rd110;
	// begin inline asm
	mov.b64 %rd111, %rd110;
	// end inline asm
	st.volatile.global.u64 	[buff+880], %rd111;
	// begin inline asm
	mov.b64 %rd112, %rd111;
	// end inline asm
	st.volatile.global.u64 	[buff+888], %rd112;
	// begin inline asm
	mov.b64 %rd113, %rd112;
	// end inline asm
	st.volatile.global.u64 	[buff+896], %rd113;
	// begin inline asm
	mov.b64 %rd114, %rd113;
	// end inline asm
	st.volatile.global.u64 	[buff+904], %rd114;
	// begin inline asm
	mov.b64 %rd115, %rd114;
	// end inline asm
	st.volatile.global.u64 	[buff+912], %rd115;
	// begin inline asm
	mov.b64 %rd116, %rd115;
	// end inline asm
	st.volatile.global.u64 	[buff+920], %rd116;
	// begin inline asm
	mov.b64 %rd117, %rd116;
	// end inline asm
	st.volatile.global.u64 	[buff+928], %rd117;
	// begin inline asm
	mov.b64 %rd118, %rd117;
	// end inline asm
	st.volatile.global.u64 	[buff+936], %rd118;
	// begin inline asm
	mov.b64 %rd119, %rd118;
	// end inline asm
	st.volatile.global.u64 	[buff+944], %rd119;
	// begin inline asm
	mov.b64 %rd120, %rd119;
	// end inline asm
	st.volatile.global.u64 	[buff+952], %rd120;
	// begin inline asm
	mov.b64 %rd121, %rd120;
	// end inline asm
	st.volatile.global.u64 	[buff+960], %rd121;
	// begin inline asm
	mov.b64 %rd122, %rd121;
	// end inline asm
	st.volatile.global.u64 	[buff+968], %rd122;
	// begin inline asm
	mov.b64 %rd123, %rd122;
	// end inline asm
	st.volatile.global.u64 	[buff+976], %rd123;
	// begin inline asm
	mov.b64 %rd124, %rd123;
	// end inline asm
	st.volatile.global.u64 	[buff+984], %rd124;
	// begin inline asm
	mov.b64 %rd125, %rd124;
	// end inline asm
	st.volatile.global.u64 	[buff+992], %rd125;
	// begin inline asm
	mov.b64 %rd126, %rd125;
	// end inline asm
	st.volatile.global.u64 	[buff+1000], %rd126;
	// begin inline asm
	mov.b64 %rd127, %rd126;
	// end inline asm
	st.volatile.global.u64 	[buff+1008], %rd127;
	// begin inline asm
	mov.b64 %rd128, %rd127;
	// end inline asm
	st.volatile.global.u64 	[buff+1016], %rd128;
	// begin inline asm
	mov.b64 %rd129, %rd128;
	// end inline asm
	st.volatile.global.u64 	[buff+1024], %rd129;
	// begin inline asm
	mov.b64 %rd130, %rd129;
	// end inline asm
	st.volatile.global.u64 	[buff+1032], %rd130;
	// begin inline asm
	mov.b64 %rd131, %rd130;
	// end inline asm
	st.volatile.global.u64 	[buff+1040], %rd131;
	// begin inline asm
	mov.b64 %rd132, %rd131;
	// end inline asm
	st.volatile.global.u64 	[buff+1048], %rd132;
	// begin inline asm
	mov.b64 %rd133, %rd132;
	// end inline asm
	st.volatile.global.u64 	[buff+1056], %rd133;
	// begin inline asm
	mov.b64 %rd134, %rd133;
	// end inline asm
	st.volatile.global.u64 	[buff+1064], %rd134;
	// begin inline asm
	mov.b64 %rd135, %rd134;
	// end inline asm
	st.volatile.global.u64 	[buff+1072], %rd135;
	// begin inline asm
	mov.b64 %rd136, %rd135;
	// end inline asm
	st.volatile.global.u64 	[buff+1080], %rd136;
	// begin inline asm
	mov.b64 %rd137, %rd136;
	// end inline asm
	st.volatile.global.u64 	[buff+1088], %rd137;
	// begin inline asm
	mov.b64 %rd138, %rd137;
	// end inline asm
	st.volatile.global.u64 	[buff+1096], %rd138;
	// begin inline asm
	mov.b64 %rd139, %rd138;
	// end inline asm
	st.volatile.global.u64 	[buff+1104], %rd139;
	// begin inline asm
	mov.b64 %rd140, %rd139;
	// end inline asm
	st.volatile.global.u64 	[buff+1112], %rd140;
	add.s32 	%r4, %r4, 1;
	setp.ne.s32 	%p1, %r4, 10000000;
	@%p1 bra 	$L__BB0_1;

	ret;

}

